import { z } from 'zod';
import { zodToJsonSchema } from 'zod-to-json-schema';

class FunctionTool {
    #fn;
    #metadata;
    // todo: for the future, we can use zod to validate the input parameters
    // eslint-disable-next-line no-unused-private-class-members
    #zodType;
    constructor(fn, metadata, zodType){
        this.#zodType = null;
        this.#fn = fn;
        this.#metadata = metadata;
        if (zodType) {
            this.#zodType = zodType;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static from(fn, schema) {
        if (schema.parameter instanceof z.ZodSchema) {
            const jsonSchema = zodToJsonSchema(schema.parameter);
            return new FunctionTool(fn, {
                ...schema,
                parameters: jsonSchema
            }, schema.parameter);
        }
        return new FunctionTool(fn, schema);
    }
    get metadata() {
        return this.#metadata;
    }
    call(input) {
        return this.#fn.call(null, input);
    }
}

export { FunctionTool };
