"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toProtoEnum = exports.WorkflowUpdateStage = void 0;
const proto_1 = require("@temporalio/proto");
const type_helpers_1 = require("@temporalio/common/lib/type-helpers");
var WorkflowUpdateStage;
(function (WorkflowUpdateStage) {
    /** This is not an allowed value. */
    WorkflowUpdateStage[WorkflowUpdateStage["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /** Admitted stage. This stage is reached when the server accepts the update request. It is not
     * allowed to wait for this stage when using startUpdate, since the update request has not yet
     * been durably persisted at this stage. */
    WorkflowUpdateStage[WorkflowUpdateStage["ADMITTED"] = 1] = "ADMITTED";
    /** Accepted stage. This stage is reached when a workflow has received the update and either
     * accepted it (i.e. it has passed validation, or there was no validator configured on the update
     * handler) or rejected it. This is currently the only allowed value when using startUpdate. */
    WorkflowUpdateStage[WorkflowUpdateStage["ACCEPTED"] = 2] = "ACCEPTED";
    /** Completed stage. This stage is reached when a workflow has completed processing the
     * update with either a success or failure. */
    WorkflowUpdateStage[WorkflowUpdateStage["COMPLETED"] = 3] = "COMPLETED";
})(WorkflowUpdateStage || (exports.WorkflowUpdateStage = WorkflowUpdateStage = {}));
(0, type_helpers_1.checkExtends)();
(0, type_helpers_1.checkExtends)();
function toProtoEnum(stage) {
    return proto_1.temporal.api.enums.v1.UpdateWorkflowExecutionLifecycleStage[`UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_${WorkflowUpdateStage[stage]}`];
}
exports.toProtoEnum = toProtoEnum;
//# sourceMappingURL=workflow-update-stage.js.map