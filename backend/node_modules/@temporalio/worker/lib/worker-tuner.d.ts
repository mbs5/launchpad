import { FixedSizeSlotSupplier, ResourceBasedTunerOptions, WorkerTuner as NativeWorkerTuner } from '@temporalio/core-bridge';
import { Duration } from '@temporalio/common/lib/time';
export { FixedSizeSlotSupplier, ResourceBasedTunerOptions };
/**
 * Controls how slots for different task types will be handed out.
 *
 * @experimental
 */
export type WorkerTuner = ResourceBasedTuner | TunerHolder;
/**
 * Resource based slot supplier options for a specific kind of slot.
 *
 * @experimental
 */
type ResourceBasedSlotsForType = ResourceBasedSlotOptions & {
    type: 'resource-based';
    tunerOptions: ResourceBasedTunerOptions;
};
/**
 * Controls how slots are handed out for a specific task type.
 *
 * For now, only {@link ResourceBasedSlotOptions} and {@link FixedSizeSlotSupplier} are supported,
 * but we may add support for custom tuners in the future.
 *
 * @experimental
 */
export type SlotSupplier = ResourceBasedSlotsForType | FixedSizeSlotSupplier;
/**
 * Options for a specific slot type within a {@link ResourceBasedSlotsForType}
 *
 * @experimental
 */
export interface ResourceBasedSlotOptions {
    minimumSlots?: number;
    maximumSlots?: number;
    rampThrottle?: Duration;
}
/**
 * This tuner attempts to maintain certain levels of resource usage when under load. You do not
 * need more than one instance of this when using it for multiple slot types.
 *
 * @experimental
 */
export interface ResourceBasedTuner {
    tunerOptions: ResourceBasedTunerOptions;
    workflowTaskSlotOptions?: ResourceBasedSlotOptions;
    activityTaskSlotOptions?: ResourceBasedSlotOptions;
    localActivityTaskSlotOptions?: ResourceBasedSlotOptions;
}
/**
 * This tuner allows for different slot suppliers for different slot types.
 *
 * @experimental
 */
export interface TunerHolder {
    workflowTaskSlotSupplier: SlotSupplier;
    activityTaskSlotSupplier: SlotSupplier;
    localActivityTaskSlotSupplier: SlotSupplier;
}
export declare function asNativeTuner(tuner: WorkerTuner): NativeWorkerTuner;
