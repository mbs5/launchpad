"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.condition = exports.sleep = exports.continueAsNew = exports.workflowInfo = exports.getExternalWorkflowHandle = exports.log = void 0;
exports.startChild = startChild;
exports.executeChild = executeChild;
exports.step = step;
const workflow_1 = require("@temporalio/workflow");
Object.defineProperty(exports, "log", { enumerable: true, get: function () { return workflow_1.log; } });
Object.defineProperty(exports, "getExternalWorkflowHandle", { enumerable: true, get: function () { return workflow_1.getExternalWorkflowHandle; } });
Object.defineProperty(exports, "workflowInfo", { enumerable: true, get: function () { return workflow_1.workflowInfo; } });
Object.defineProperty(exports, "continueAsNew", { enumerable: true, get: function () { return workflow_1.continueAsNew; } });
Object.defineProperty(exports, "sleep", { enumerable: true, get: function () { return workflow_1.sleep; } });
Object.defineProperty(exports, "condition", { enumerable: true, get: function () { return workflow_1.condition; } });
// Helper function to add engineId prefix
function addEngineIdPrefix(engineId, workflowId) {
    return `${engineId}-${workflowId}`;
}
// Function to get engineId from the parent workflow
function getEngineIdFromClient() {
    var _a;
    return (_a = (0, workflow_1.workflowInfo)().memo.engineId) !== null && _a !== void 0 ? _a : "local";
}
/**
 * Starts a child workflow with an engine-specific prefix added to the workflow ID.
 * @param workflowFunc The workflow function to start as a child workflow.
 * @param options The options for the child workflow, including the workflow ID.
 * @returns A promise that resolves to a ChildWorkflowHandle for the started workflow.
 */
function startChild(workflowFunc, options) {
    const engineId = getEngineIdFromClient();
    const prefixedOptions = Object.assign(Object.assign({}, options), { workflowId: addEngineIdPrefix(engineId, options.workflowId), searchAttributes: {
            engineId: [engineId],
        } });
    return (0, workflow_1.startChild)(workflowFunc, prefixedOptions);
}
/**
 * Executes a child workflow.
 * @param workflowFunc The workflow function to execute as a child workflow.
 * @param options The options for the child workflow, including the workflow ID.
 * @returns A promise that resolves to the result of the child workflow.
 */
function executeChild(workflowFunc, options) {
    const engineId = getEngineIdFromClient();
    const prefixedOptions = Object.assign(Object.assign({}, options), { workflowId: addEngineIdPrefix(engineId, options.workflowId), searchAttributes: {
            engineId: [engineId],
        } });
    return (0, workflow_1.executeChild)(workflowFunc, prefixedOptions);
}
/**
 * A single step within a workflow.
 * @param options The function options to use.
 * @example
 * ```typescript
 * const function = step({
 *   taskQueue: "custom-queue"
 *   scheduleToCloseTimeout: "5 minutes",
 * });
 * ```
 * @returns A function interface used to invoke functions.
 */
function step(options) {
    const defaultOptions = {
        scheduleToCloseTimeout: "2 minutes",
    };
    const mergedOptions = Object.assign(Object.assign({}, defaultOptions), options);
    return (0, workflow_1.proxyActivities)(mergedOptions);
}
