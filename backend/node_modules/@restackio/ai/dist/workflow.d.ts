import { ActivityOptions, UntypedActivities, log, getExternalWorkflowHandle, workflowInfo, continueAsNew, sleep, condition, ActivityInterfaceFor, WithWorkflowArgs, ChildWorkflowOptions, ChildWorkflowHandle, Workflow, WorkflowResultType } from "@temporalio/workflow";
export { log, getExternalWorkflowHandle, workflowInfo, continueAsNew, sleep, condition, };
/**
 * Starts a child workflow with an engine-specific prefix added to the workflow ID.
 * @param workflowFunc The workflow function to start as a child workflow.
 * @param options The options for the child workflow, including the workflow ID.
 * @returns A promise that resolves to a ChildWorkflowHandle for the started workflow.
 */
export declare function startChild<T extends Workflow>(workflowFunc: T, options: WithWorkflowArgs<T, ChildWorkflowOptions>): Promise<ChildWorkflowHandle<T>>;
/**
 * Executes a child workflow.
 * @param workflowFunc The workflow function to execute as a child workflow.
 * @param options The options for the child workflow, including the workflow ID.
 * @returns A promise that resolves to the result of the child workflow.
 */
export declare function executeChild<T extends Workflow>(workflowFunc: T, options: WithWorkflowArgs<T, ChildWorkflowOptions>): Promise<WorkflowResultType<T>>;
/**
 * A single step within a workflow.
 * @param options The function options to use.
 * @example
 * ```typescript
 * const function = step({
 *   taskQueue: "custom-queue"
 *   scheduleToCloseTimeout: "5 minutes",
 * });
 * ```
 * @returns A function interface used to invoke functions.
 */
export declare function step<A = UntypedActivities>(options: ActivityOptions): ActivityInterfaceFor<A>;
