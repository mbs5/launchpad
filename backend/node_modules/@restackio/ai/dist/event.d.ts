import { UpdateDefinition } from "@temporalio/client";
import { UpdateHandlerOptions } from "@temporalio/workflow/lib/interfaces";
/**
 * Define an event for a Workflow.
 *
 * A definition is used to register an event listener in the Workflow via onEvent and to send an event to a Workflow using sendWorkflowEvent.
 * A definition can be reused in multiple Workflows.
 */
export declare function defineEvent<Ret = void, Name extends string = string>(name: Name): UpdateDefinition<Ret, [Ret], Name>;
/**
 * Set a listener for an event in a Workflow.
 *
 * If this is called multiple times for a given event the last handler will overwrite any previous calls.
 *
 * @param def an event definition as returned by {@link defineEvent}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
export declare function onEvent<Ret, Args extends any[], T extends UpdateDefinition<Ret, Args>>(def: T, handler: (args: Args[0]) => Promise<Ret> | Ret, options?: UpdateHandlerOptions<Args>): void;
export type WorkflowEvent = {
    name: string;
    input?: {
        [key: string]: any;
    };
};
export type SendWorkflowEvent = {
    event: WorkflowEvent;
    workflow?: {
        workflowId: string;
        runId?: string;
    };
};
