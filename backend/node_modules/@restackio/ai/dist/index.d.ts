import { ScheduleSpec, Workflow, WorkflowHandle, WorkflowResultType } from "@temporalio/client";
import { WorkerOptions } from "@temporalio/worker";
import { SendWorkflowEvent } from "./event";
export type CloudConnectionOptions = {
    engineId: string;
    apiKey: string;
    address?: string;
    temporalNamespace?: string;
};
export type ServiceInput = {
    taskQueue?: string;
    workflowsPath?: string;
    functions?: WorkerOptions["activities"];
    options?: {
        rateLimit?: number;
        maxConcurrentWorkflowRuns?: number;
        maxConcurrentFunctionRuns?: number;
    };
    connectionOptions?: CloudConnectionOptions;
};
declare class Restack {
    private client;
    private options?;
    constructor(options?: CloudConnectionOptions);
    private getConnectionOptions;
    private createClient;
    private connect;
    private createService;
    private runService;
    /**
     * Starts a service with the specified configuration.
     *
     * @param {Object} params - The parameters for starting the service.
     * @param {string} [params.taskQueue='restack'] - The task queue name for the service.
     * @param {string} [params.workflowsPath] - The path to the workflows directory.
     * @param {WorkerOptions['activities']} [params.functions] - The functions to be registered with the service.
     * @param {Object} [params.options] - Additional options for the service.
     * @param {number} [params.options.rateLimit] - The rate limit for functions.
     * @param {number} [params.options.maxConcurrentWorkflowRuns] - The maximum number of concurrent workflow runs.
     * @param {number} [params.options.maxConcurrentFunctionRuns] - The maximum number of concurrent function runs.
     * @returns {Promise<void>} A promise that resolves when the service has started.
     * @throws {Error} If the service fails to start.
     */
    startService({ taskQueue, workflowsPath, functions, options, }: ServiceInput): Promise<void>;
    /**
     * Schedules or starts a workflow.
     *
     * @param {Object} params - The parameters for scheduling or starting the workflow.
     * @param {string} params.workflowName - The name of the workflow to schedule or start.
     * @param {string} params.workflowId - The ID of the workflow.
     * @param {Object} [params.input] - The input data for the workflow.
     * @param {string} [params.taskQueue='restack'] - The task queue for the workflow.
     * @param {ScheduleSpec} [params.schedule] - The schedule specification for the workflow. If not provided, the workflow starts immediately.
     * @returns {Promise<string>} A promise that resolves to the runId (for immediate start) or scheduleId (for scheduled workflows).
     * @throws {Error} If the workflow fails to start or schedule.
     */
    scheduleWorkflow({ workflowName, workflowId, input, taskQueue, schedule, }: {
        workflowName: string;
        workflowId: string;
        input?: {
            [key: string]: any;
        };
        taskQueue?: string;
        schedule?: ScheduleSpec;
    }): Promise<string>;
    /**
     * Retrieves a workflow handle.
     *
     * @param {Object} params - The parameters for retrieving the workflow handle.
     * @param {string} params.workflowId - The ID of the workflow.
     * @param {string} params.runId - The run ID of the workflow execution.
     * @returns {Promise<WorkflowHandle<Workflow>>} A promise that resolves to the workflow handle.
     * @throws {Error} If the workflow handle cannot be retrieved.
     */
    getWorkflowHandle({ workflowId, runId, }: {
        workflowId: string;
        runId?: string;
    }): Promise<WorkflowHandle<Workflow>>;
    /**
     * Retrieves the result of a workflow execution.
     *
     * @param {Object} params - The parameters for retrieving the workflow result.
     * @param {string} params.workflowId - The ID of the workflow.
     * @param {string} params.runId - The run ID of the workflow execution.
     * @returns {Promise<WorkflowResultType<Workflow>>} A promise that resolves to the workflow result.
     * @throws {Error} If the workflow result cannot be retrieved.
     */
    getWorkflowResult({ workflowId, runId, }: {
        workflowId: string;
        runId?: string;
    }): Promise<WorkflowResultType<Workflow>>;
    /**
     * Sends an event to a running workflow.
     * Cannot be called from a workflow, only from a client or a function.
     *
     * @param {SendWorkflowEvent} params - The parameters for sending the workflow event.
     * @param {Object} params.event - The event to send.
     * @param {string} params.event.name - The name of the event.
     * @param {any} params.event.input - The input data for the event.
     * @param {Object} params.workflow - The workflow information.
     * @param {string} params.workflow.workflowId - The ID of the workflow.
     * @param {string} params.workflow.runId - The run ID of the workflow execution.
     * @returns {Promise<unknown>} A promise that resolves to the result of the event execution.
     * @throws {Error} If the event fails to send.
     */
    sendWorkflowEvent({ event, workflow, }: SendWorkflowEvent): Promise<unknown>;
    /**
     * Retrieves the latest data of a workflow event.
     *
     * @param {Object} params - The parameters for retrieving the workflow event.
     * @param {string} params.workflowId - The ID of the workflow.
     * @param {string} params.runId - The run ID of the workflow execution.
     * @param {string} params.eventName - The name of the event.
     * @returns {Promise<WorkflowResultType<Workflow>>} A promise that resolves to the workflow event data.
     * @throws {Error} If the workflow event cannot be retrieved.
     */
    getWorkflowEvent({ workflowId, runId, eventName, }: {
        workflowId: string;
        runId?: string;
        eventName: string;
    }): Promise<WorkflowResultType<Workflow>>;
    /**
     * Retrieves the latest data of a workflow memory.
     *
     * @param {Object} params - The parameters for retrieving the workflow memory.
     * @param {string} params.workflowId - The ID of the workflow.
     * @param {string} params.runId - The run ID of the workflow execution.
     * @param {string} params.memoryName - The name of the memory.
     * @returns {Promise<WorkflowResultType<Workflow>>} A promise that resolves to the workflow memory data.
     * @throws {Error} If the workflow memory cannot be retrieved.
     */
    getWorkflowMemory({ workflowId, runId, memoryName, }: {
        workflowId: string;
        runId?: string;
        memoryName: string;
    }): Promise<WorkflowResultType<Workflow>>;
}
export default Restack;
