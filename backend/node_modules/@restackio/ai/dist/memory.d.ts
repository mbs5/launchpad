import { QueryDefinition } from "@temporalio/client";
import { UpdateHandlerOptions } from "@temporalio/workflow/lib/interfaces";
/**
 * Define a memory method for a Workflow.
 *
 * A definition is used to register a handler in the Workflow via {@link setHandler} and to query a Workflow using a {@link WorkflowHandle}.
 * A definition can be reused in multiple Workflows.
 */
export declare function defineMemory<Ret = void, Name extends string = string>(name: Name): QueryDefinition<Ret, [Ret], Name>;
/**
 * Set a handler function for a Workflow memory.
 *
 * If this function is called multiple times for a given memory name the last handler will overwrite any previous calls.
 *
 * @param def a memory definition as returned by {@link defineMemory}.
 * @param handler a compatible handler function for the given definition or `undefined` to unset the handler.
 * @param options an optional `description` of the handler and an optional update `validator` function.
 */
export declare function handleMemory<Ret, Args extends any[], T extends QueryDefinition<Ret, Args>>(def: T, handler: (args: Args[0]) => Promise<Ret> | Ret, options?: UpdateHandlerOptions<Args>): void;
