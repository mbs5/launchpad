"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
require("dotenv/config");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const connectionOptions = {
                engineId: process.env.RESTACK_ENGINE_ID,
                address: process.env.RESTACK_ENGINE_ADDRESS,
                apiKey: process.env.RESTACK_ENGINE_API_KEY,
            };
            console.log("connectionOptions", connectionOptions);
            const restack = new index_1.default(process.env.RESTACK_ENGINE_API_KEY ? connectionOptions : undefined);
            console.log("restackClient", restack);
            restack.startService({}), console.log("Services running successfully.");
        }
        catch (e) {
            console.error("Failed to run services", e);
        }
    });
}
main().catch((err) => {
    console.error("Error in main:", err);
});
