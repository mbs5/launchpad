import { z } from 'zod';
export const DatabaseInputSchema = z.object({
    name: z.string(),
    username: z.string(),
    password: z.string(),
});
export const ApplicationInputSchema = z.object({
    name: z.string(),
    productName: z.string().optional(),
    dockerFilePath: z.string().optional(),
    environmentVariables: z
        .array(z.object({
        name: z.string(),
        value: z.union([z.string(), z.boolean()]).optional(),
        linkTo: z.string().optional(),
    }))
        .optional(),
    gitUrl: z.string().optional(),
    gitBranch: z.string().optional(),
    dockerBuildContext: z.string().optional(),
    image: z.string().optional(),
    database: DatabaseInputSchema.optional(),
    cloudStorage: z.boolean().optional(),
    redis: z.boolean().optional(),
});
export const ApplicationDeploymentSchema = ApplicationInputSchema.extend({
    gitUrl: z.string(),
    gitBranch: z.string(),
    database: DatabaseInputSchema.optional(),
    cloudStorage: z.boolean().optional(),
    redis: z.boolean().optional(),
});
export const RefinedApplicationInputSchema = ApplicationInputSchema.refine((data) => data.dockerFilePath || data.image, {
    message: "Either 'dockerFilePath' or 'image' must be provided.",
    path: ['dockerFilePath', 'image'], // Specify the path for the error
});
export const PlanSchema = z.object({
    action: z.enum(['create', 'update', 'delete']),
    resourceType: z.enum(['Stack', 'Application', 'Database']),
    changes: z.array(z.object({
        key: z.string(),
        from: z.union([z.string(), z.boolean()]).optional(),
        to: z.union([z.string(), z.boolean()]).optional(),
        value: z.union([z.string(), z.boolean(), z.null()]).optional(),
    })),
    metadata: z
        .object({
        id: z.string().optional(),
        name: z.string().optional(),
    })
        .optional(),
});
export const ApplicationSchema = ApplicationInputSchema.extend({
    plan: PlanSchema,
    databasePlan: PlanSchema.optional(),
});
export const StackSchema = z.object({
    name: z.string(),
    previewEnabled: z.boolean(),
    applications: z.array(ApplicationSchema),
    plan: PlanSchema,
});
export const StackInputSchema = z.object({
    name: z.string(),
    previewEnabled: z.boolean(),
    applications: z.array(ApplicationInputSchema),
});
export const StackPlanInputSchema = StackInputSchema.extend({
    applications: z.array(ApplicationDeploymentSchema),
});
export const StackDeployPayloadSchema = StackInputSchema.extend({
    applications: z.array(ApplicationDeploymentSchema),
});
export const DeployedApplicationSchema = z.object({
    name: z.string().optional(),
    productName: z.string().optional(),
    error: z.string().optional(),
    type: z.string().optional(),
    details: z
        .array(z.object({
        connectUrl: z.string(),
    }))
        .optional(),
});
export const DeployedStackSchema = z.object({
    name: z.string(),
    error: z.string().optional(),
    applications: z.array(DeployedApplicationSchema),
});
export const StacksDeployPayloadSchema = z.object({
    stacks: z.array(StackDeployPayloadSchema),
});
