import chalk from 'chalk';
function prettyPrintModificationPlan(plan) {
    console.log(chalk.bold(`Action: `) + chalk.green(plan.action));
    console.log(chalk.bold(`Resource Type: `) + chalk.green(plan.resourceType));
    console.log(chalk.bold(`Changes:`));
    plan.changes.forEach((change, index) => {
        console.log(chalk.bold(`  Change ${index + 1}:`));
        console.log(`    Key: ${chalk.cyan(change.key)}`);
        if (change.from !== undefined) {
            console.log(`    From: ${chalk.red(change.from)}`);
        }
        if (change.to !== undefined) {
            console.log(`    To: ${chalk.green(change.to)}`);
        }
        if (change.value !== undefined) {
            console.log(`    Value: ${chalk.yellow(change.value)}`);
        }
    });
}
export function prettyPrintStackModificationPlan(stacks) {
    console.log(chalk.bold(`\nRestack deployment plan:`));
    stacks.forEach((stack, index) => {
        console.log(chalk.bold(`\nStack #${chalk.blue(index + 1)}`));
        prettyPrintModificationPlan(stack.plan);
        if (stack.applications && stack.applications.length > 0) {
            stack.applications.forEach((application, ind) => {
                if (application.plan) {
                    console.log(chalk.bold(`\nApplication #${chalk.blue(ind + 1)}`));
                    prettyPrintModificationPlan(application.plan);
                }
                if (application.databasePlan) {
                    console.log(chalk.bold(`\nDatabase #${chalk.blue(ind + 1)}`));
                    prettyPrintModificationPlan(application.databasePlan);
                }
            });
        }
        else {
            console.log(chalk.yellow(`No applications in this stack.`));
        }
    });
}
export const loadingSpinner = (loadingText) => {
    const spinner = ['|', '/', '-', '\\'];
    let i = 0;
    const deployingInterval = setInterval(() => {
        process.stdout.write(`\r${chalk.cyan(loadingText)}${spinner[i++ % spinner.length]}`);
    }, 100);
    return deployingInterval;
};
