var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import chalk from 'chalk';
import { simpleGit } from 'simple-git';
import * as errorCodes from './errorCodes.js';
export function validateUniqueStackName(stacks, name) {
    const stackExists = stacks.some((stack) => stack.name === name);
    if (stackExists) {
        console.error(chalk.red.bold('Error: ') +
            chalk.yellow(`Stacks should have unique names on the same deployment plan. Repeated stack name: ${name}`));
        throw new Error('Stacks should have unique names on the same deployment plan.');
    }
}
export function validateUniqueApplicationName(applications) {
    const nameSet = new Set();
    for (const application of applications) {
        if (nameSet.has(application.name)) {
            throw new Error(`Applications should have unique names within the same stack. Repeated name: ${application.name}`);
        }
        nameSet.add(application.name);
    }
}
export function prettyPrintDeployResults(stacks) {
    stacks.forEach((stack) => {
        console.log(chalk.bold(`\n=== Stack: ${chalk.blue(stack.name)} ===`));
        if (stack.error) {
            console.log(chalk.red('Failed to deploy stack: ') + chalk.yellow(stack.error));
        }
        else {
            console.log(chalk.green('Stack deployment kicked off successfully'));
        }
        stack.applications.forEach((app) => {
            var _a, _b, _c, _d;
            console.log(chalk.bold(`\n  --- Application: ${chalk.blue((_a = app.name) !== null && _a !== void 0 ? _a : '')} ---`));
            if (app.error) {
                console.log(chalk.yellow(`  Failed to deploy application: ${app.error}`));
                if (app.type === errorCodes.GITHUB_APP_INSTALLATION_REQUIRED) {
                    console.log(chalk.yellow('  You can install the app at: ') +
                        chalk.green(ensureHttpPrefix((_d = (_c = (_b = app.details) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.connectUrl) !== null && _d !== void 0 ? _d : '')));
                }
            }
            else {
                console.log(chalk.green('  Application deployment kicked off successfully'));
            }
        });
    });
}
export function getGitBranch() {
    return __awaiter(this, void 0, void 0, function* () {
        const git = simpleGit();
        const branch = yield git.revparse(['--abbrev-ref', 'HEAD']);
        return branch;
    });
}
export function convertGitSshUrlToHttps(url) {
    const trimmedUrl = url.trim();
    // Convert SSH URL to HTTPS URL if necessary
    if (trimmedUrl.startsWith('git@github.com:')) {
        const [, path] = trimmedUrl.split(':');
        return `https://github.com/${path.replace('.git', '')}`;
    }
    // Remove .git suffix if present
    const httpsUrl = trimmedUrl.replace(/\.git$/, '');
    // Ensure the URL starts with https://
    if (!httpsUrl.startsWith('https://')) {
        return `https://github.com/${httpsUrl.split('/').slice(-2).join('/')}`;
    }
    // Ensure the URL starts with https://
    if (!httpsUrl.startsWith('https://')) {
        return `https://github.com/${httpsUrl.split('/').slice(-2).join('/')}`;
    }
    return httpsUrl;
}
export function getRemoteUrl() {
    return __awaiter(this, void 0, void 0, function* () {
        const git = simpleGit();
        const remoteUrl = (yield git.remote(['get-url', 'origin']));
        return convertGitSshUrlToHttps(remoteUrl);
    });
}
export function ensureHttpPrefix(url) {
    if (url.startsWith('http://') || url.startsWith('https://')) {
        return url;
    }
    if (!url.startsWith('https://')) {
        return `https://${url}`;
    }
    return url;
}
export function hasApplicationErrors(deployedStacks) {
    return deployedStacks.some((stack) => stack.applications.some((app) => app.error));
}
export function getApplicationWithGithubAppError(deployedStacks) {
    for (const stack of deployedStacks) {
        const app = stack.applications.find((app) => app.type === errorCodes.GITHUB_APP_INSTALLATION_REQUIRED);
        if (app) {
            return app;
        }
    }
    return undefined;
}
