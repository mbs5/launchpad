import { StackInput } from './types.js';
export declare class RestackCloud {
    private token;
    private isPlan;
    private stacks;
    private url;
    private stackPlanGenerated;
    /**
     * Creates an instance of the RestackCloud client.
     *
     * @param {string} token - The Restack SDK token.
     */
    constructor(token: string);
    private promptUser;
    private deployRestackPlan;
    /**
     * Generates a stack plan and validates the stack and application names.
     *
     * @param {Object} params - The parameters for the stack.
     * @param {string} params.name - The name of the stack.
     * @param {boolean} [params.previewEnabled=false] - Flag to enable preview.
     * @param {Array} [params.applications=[]] - List of applications to include in the stack.
     *
     * @returns {Promise<string | null>} - The name of the created stack or null if the stack plan generation fails or the response is invalid.
     *
     * @throws {Error} - Throws an error if the stack plan generation fails or the response is invalid.
     */
    stack({ name, previewEnabled, applications, }: StackInput): Promise<string | null>;
    /**
     * Initiates the deployment process for the stack modification plan.
     *
     * This function first prints the stack modification plan. If the instance is not in plan mode,
     * it confirms the deployment and starts the deployment process. If in plan mode, it prompts the user
     * for confirmation before proceeding with the deployment.
     *
     * @returns {Promise<void>} - A promise that resolves when the deployment process is complete.
     */
    up(): Promise<void>;
}
export default RestackCloud;
//# sourceMappingURL=restackCloud.d.ts.map