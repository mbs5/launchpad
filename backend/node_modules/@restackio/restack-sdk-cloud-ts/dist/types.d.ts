import { z } from 'zod';
export declare const DatabaseInputSchema: z.ZodObject<{
    name: z.ZodString;
    username: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    username: string;
    password: string;
}, {
    name: string;
    username: string;
    password: string;
}>;
export declare const ApplicationInputSchema: z.ZodObject<{
    name: z.ZodString;
    productName: z.ZodOptional<z.ZodString>;
    dockerFilePath: z.ZodOptional<z.ZodString>;
    environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>, "many">>;
    gitUrl: z.ZodOptional<z.ZodString>;
    gitBranch: z.ZodOptional<z.ZodString>;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodString>;
    database: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        username: string;
        password: string;
    }, {
        name: string;
        username: string;
        password: string;
    }>>;
    cloudStorage: z.ZodOptional<z.ZodBoolean>;
    redis: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}>;
export declare const ApplicationDeploymentSchema: z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodString;
    productName: z.ZodOptional<z.ZodString>;
    dockerFilePath: z.ZodOptional<z.ZodString>;
    environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>, "many">>;
    gitUrl: z.ZodOptional<z.ZodString>;
    gitBranch: z.ZodOptional<z.ZodString>;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodString>;
    database: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        username: string;
        password: string;
    }, {
        name: string;
        username: string;
        password: string;
    }>>;
    cloudStorage: z.ZodOptional<z.ZodBoolean>;
    redis: z.ZodOptional<z.ZodBoolean>;
}, {
    gitUrl: z.ZodString;
    gitBranch: z.ZodString;
    database: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        username: string;
        password: string;
    }, {
        name: string;
        username: string;
        password: string;
    }>>;
    cloudStorage: z.ZodOptional<z.ZodBoolean>;
    redis: z.ZodOptional<z.ZodBoolean>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    gitUrl: string;
    gitBranch: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}, {
    name: string;
    gitUrl: string;
    gitBranch: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}>;
export declare const RefinedApplicationInputSchema: z.ZodEffects<z.ZodObject<{
    name: z.ZodString;
    productName: z.ZodOptional<z.ZodString>;
    dockerFilePath: z.ZodOptional<z.ZodString>;
    environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>, "many">>;
    gitUrl: z.ZodOptional<z.ZodString>;
    gitBranch: z.ZodOptional<z.ZodString>;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodString>;
    database: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        username: string;
        password: string;
    }, {
        name: string;
        username: string;
        password: string;
    }>>;
    cloudStorage: z.ZodOptional<z.ZodBoolean>;
    redis: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}>, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}, {
    name: string;
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
}>;
export declare const PlanSchema: z.ZodObject<{
    action: z.ZodEnum<["create", "update", "delete"]>;
    resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
    changes: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }, {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }>, "many">;
    metadata: z.ZodOptional<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        id?: string | undefined;
    }, {
        name?: string | undefined;
        id?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    action: "create" | "update" | "delete";
    resourceType: "Stack" | "Application" | "Database";
    changes: {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }[];
    metadata?: {
        name?: string | undefined;
        id?: string | undefined;
    } | undefined;
}, {
    action: "create" | "update" | "delete";
    resourceType: "Stack" | "Application" | "Database";
    changes: {
        key: string;
        value?: string | boolean | null | undefined;
        from?: string | boolean | undefined;
        to?: string | boolean | undefined;
    }[];
    metadata?: {
        name?: string | undefined;
        id?: string | undefined;
    } | undefined;
}>;
export declare const ApplicationSchema: z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodString;
    productName: z.ZodOptional<z.ZodString>;
    dockerFilePath: z.ZodOptional<z.ZodString>;
    environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
        linkTo: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }, {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }>, "many">>;
    gitUrl: z.ZodOptional<z.ZodString>;
    gitBranch: z.ZodOptional<z.ZodString>;
    dockerBuildContext: z.ZodOptional<z.ZodString>;
    image: z.ZodOptional<z.ZodString>;
    database: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
        username: z.ZodString;
        password: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        username: string;
        password: string;
    }, {
        name: string;
        username: string;
        password: string;
    }>>;
    cloudStorage: z.ZodOptional<z.ZodBoolean>;
    redis: z.ZodOptional<z.ZodBoolean>;
}, {
    plan: z.ZodObject<{
        action: z.ZodEnum<["create", "update", "delete"]>;
        resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
        changes: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }>, "many">;
        metadata: z.ZodOptional<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            id?: string | undefined;
        }, {
            name?: string | undefined;
            id?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }>;
    databasePlan: z.ZodOptional<z.ZodObject<{
        action: z.ZodEnum<["create", "update", "delete"]>;
        resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
        changes: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }>, "many">;
        metadata: z.ZodOptional<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            id?: string | undefined;
        }, {
            name?: string | undefined;
            id?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }>>;
}>, "strip", z.ZodTypeAny, {
    name: string;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
    databasePlan?: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    name: string;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    productName?: string | undefined;
    dockerFilePath?: string | undefined;
    environmentVariables?: {
        name: string;
        value?: string | boolean | undefined;
        linkTo?: string | undefined;
    }[] | undefined;
    gitUrl?: string | undefined;
    gitBranch?: string | undefined;
    dockerBuildContext?: string | undefined;
    image?: string | undefined;
    database?: {
        name: string;
        username: string;
        password: string;
    } | undefined;
    cloudStorage?: boolean | undefined;
    redis?: boolean | undefined;
    databasePlan?: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    } | undefined;
}>;
export declare const StackSchema: z.ZodObject<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, {
        plan: z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>;
        databasePlan: z.ZodOptional<z.ZodObject<{
            action: z.ZodEnum<["create", "update", "delete"]>;
            resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
            changes: z.ZodArray<z.ZodObject<{
                key: z.ZodString;
                from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
            }, "strip", z.ZodTypeAny, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }, {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }>, "many">;
            metadata: z.ZodOptional<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name?: string | undefined;
                id?: string | undefined;
            }, {
                name?: string | undefined;
                id?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }, {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        }>>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
        databasePlan?: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        } | undefined;
    }, {
        name: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
        databasePlan?: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        } | undefined;
    }>, "many">;
    plan: z.ZodObject<{
        action: z.ZodEnum<["create", "update", "delete"]>;
        resourceType: z.ZodEnum<["Stack", "Application", "Database"]>;
        changes: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            from: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            to: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean, z.ZodNull]>>;
        }, "strip", z.ZodTypeAny, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }, {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }>, "many">;
        metadata: z.ZodOptional<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            id?: string | undefined;
        }, {
            name?: string | undefined;
            id?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }, {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    previewEnabled: boolean;
    applications: {
        name: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
        databasePlan?: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        } | undefined;
    }[];
}, {
    name: string;
    plan: {
        action: "create" | "update" | "delete";
        resourceType: "Stack" | "Application" | "Database";
        changes: {
            key: string;
            value?: string | boolean | null | undefined;
            from?: string | boolean | undefined;
            to?: string | boolean | undefined;
        }[];
        metadata?: {
            name?: string | undefined;
            id?: string | undefined;
        } | undefined;
    };
    previewEnabled: boolean;
    applications: {
        name: string;
        plan: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        };
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
        databasePlan?: {
            action: "create" | "update" | "delete";
            resourceType: "Stack" | "Application" | "Database";
            changes: {
                key: string;
                value?: string | boolean | null | undefined;
                from?: string | boolean | undefined;
                to?: string | boolean | undefined;
            }[];
            metadata?: {
                name?: string | undefined;
                id?: string | undefined;
            } | undefined;
        } | undefined;
    }[];
}>;
export declare const StackInputSchema: z.ZodObject<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}>;
export declare const StackPlanInputSchema: z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }>, "many">;
}, {
    applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, {
        gitUrl: z.ZodString;
        gitBranch: z.ZodString;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }, {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }>, "many">;
}>, "strip", z.ZodTypeAny, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}>;
export declare const StackDeployPayloadSchema: z.ZodObject<z.objectUtil.extendShape<{
    name: z.ZodString;
    previewEnabled: z.ZodBoolean;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }, {
        name: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        gitUrl?: string | undefined;
        gitBranch?: string | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }>, "many">;
}, {
    applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        productName: z.ZodOptional<z.ZodString>;
        dockerFilePath: z.ZodOptional<z.ZodString>;
        environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
            linkTo: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }, {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }>, "many">>;
        gitUrl: z.ZodOptional<z.ZodString>;
        gitBranch: z.ZodOptional<z.ZodString>;
        dockerBuildContext: z.ZodOptional<z.ZodString>;
        image: z.ZodOptional<z.ZodString>;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }, {
        gitUrl: z.ZodString;
        gitBranch: z.ZodString;
        database: z.ZodOptional<z.ZodObject<{
            name: z.ZodString;
            username: z.ZodString;
            password: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            username: string;
            password: string;
        }, {
            name: string;
            username: string;
            password: string;
        }>>;
        cloudStorage: z.ZodOptional<z.ZodBoolean>;
        redis: z.ZodOptional<z.ZodBoolean>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }, {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }>, "many">;
}>, "strip", z.ZodTypeAny, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}, {
    name: string;
    previewEnabled: boolean;
    applications: {
        name: string;
        gitUrl: string;
        gitBranch: string;
        productName?: string | undefined;
        dockerFilePath?: string | undefined;
        environmentVariables?: {
            name: string;
            value?: string | boolean | undefined;
            linkTo?: string | undefined;
        }[] | undefined;
        dockerBuildContext?: string | undefined;
        image?: string | undefined;
        database?: {
            name: string;
            username: string;
            password: string;
        } | undefined;
        cloudStorage?: boolean | undefined;
        redis?: boolean | undefined;
    }[];
}>;
export declare const DeployedApplicationSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    productName: z.ZodOptional<z.ZodString>;
    error: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodString>;
    details: z.ZodOptional<z.ZodArray<z.ZodObject<{
        connectUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        connectUrl: string;
    }, {
        connectUrl: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    type?: string | undefined;
    productName?: string | undefined;
    error?: string | undefined;
    details?: {
        connectUrl: string;
    }[] | undefined;
}, {
    name?: string | undefined;
    type?: string | undefined;
    productName?: string | undefined;
    error?: string | undefined;
    details?: {
        connectUrl: string;
    }[] | undefined;
}>;
export declare const DeployedStackSchema: z.ZodObject<{
    name: z.ZodString;
    error: z.ZodOptional<z.ZodString>;
    applications: z.ZodArray<z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        productName: z.ZodOptional<z.ZodString>;
        error: z.ZodOptional<z.ZodString>;
        type: z.ZodOptional<z.ZodString>;
        details: z.ZodOptional<z.ZodArray<z.ZodObject<{
            connectUrl: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            connectUrl: string;
        }, {
            connectUrl: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: string | undefined;
        type?: string | undefined;
        productName?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }, {
        name?: string | undefined;
        type?: string | undefined;
        productName?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    applications: {
        name?: string | undefined;
        type?: string | undefined;
        productName?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }[];
    error?: string | undefined;
}, {
    name: string;
    applications: {
        name?: string | undefined;
        type?: string | undefined;
        productName?: string | undefined;
        error?: string | undefined;
        details?: {
            connectUrl: string;
        }[] | undefined;
    }[];
    error?: string | undefined;
}>;
export declare const StacksDeployPayloadSchema: z.ZodObject<{
    stacks: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        name: z.ZodString;
        previewEnabled: z.ZodBoolean;
        applications: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            productName: z.ZodOptional<z.ZodString>;
            dockerFilePath: z.ZodOptional<z.ZodString>;
            environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                linkTo: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }>, "many">>;
            gitUrl: z.ZodOptional<z.ZodString>;
            gitBranch: z.ZodOptional<z.ZodString>;
            dockerBuildContext: z.ZodOptional<z.ZodString>;
            image: z.ZodOptional<z.ZodString>;
            database: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                username: string;
                password: string;
            }, {
                name: string;
                username: string;
                password: string;
            }>>;
            cloudStorage: z.ZodOptional<z.ZodBoolean>;
            redis: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            gitUrl?: string | undefined;
            gitBranch?: string | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }, {
            name: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            gitUrl?: string | undefined;
            gitBranch?: string | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }>, "many">;
    }, {
        applications: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
            name: z.ZodString;
            productName: z.ZodOptional<z.ZodString>;
            dockerFilePath: z.ZodOptional<z.ZodString>;
            environmentVariables: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
                linkTo: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }, {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }>, "many">>;
            gitUrl: z.ZodOptional<z.ZodString>;
            gitBranch: z.ZodOptional<z.ZodString>;
            dockerBuildContext: z.ZodOptional<z.ZodString>;
            image: z.ZodOptional<z.ZodString>;
            database: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                username: string;
                password: string;
            }, {
                name: string;
                username: string;
                password: string;
            }>>;
            cloudStorage: z.ZodOptional<z.ZodBoolean>;
            redis: z.ZodOptional<z.ZodBoolean>;
        }, {
            gitUrl: z.ZodString;
            gitBranch: z.ZodString;
            database: z.ZodOptional<z.ZodObject<{
                name: z.ZodString;
                username: z.ZodString;
                password: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                username: string;
                password: string;
            }, {
                name: string;
                username: string;
                password: string;
            }>>;
            cloudStorage: z.ZodOptional<z.ZodBoolean>;
            redis: z.ZodOptional<z.ZodBoolean>;
        }>, "strip", z.ZodTypeAny, {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }, {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }>, "many">;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        previewEnabled: boolean;
        applications: {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }[];
    }, {
        name: string;
        previewEnabled: boolean;
        applications: {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }[];
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    stacks: {
        name: string;
        previewEnabled: boolean;
        applications: {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }[];
    }[];
}, {
    stacks: {
        name: string;
        previewEnabled: boolean;
        applications: {
            name: string;
            gitUrl: string;
            gitBranch: string;
            productName?: string | undefined;
            dockerFilePath?: string | undefined;
            environmentVariables?: {
                name: string;
                value?: string | boolean | undefined;
                linkTo?: string | undefined;
            }[] | undefined;
            dockerBuildContext?: string | undefined;
            image?: string | undefined;
            database?: {
                name: string;
                username: string;
                password: string;
            } | undefined;
            cloudStorage?: boolean | undefined;
            redis?: boolean | undefined;
        }[];
    }[];
}>;
export type Plan = z.infer<typeof PlanSchema>;
export type Stack = z.infer<typeof StackSchema>;
export type StackInput = z.infer<typeof StackInputSchema>;
export type DeployedApplication = z.infer<typeof DeployedApplicationSchema>;
export type DeployedStack = z.infer<typeof DeployedStackSchema>;
export type StacksDeployPayload = z.infer<typeof StacksDeployPayloadSchema>;
export type StackPlanInput = z.infer<typeof StackPlanInputSchema>;
//# sourceMappingURL=types.d.ts.map